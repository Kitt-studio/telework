{"version":3,"sources":["store/answersReducer.ts","views/shared/styles.ts","views/statesChart.tsx","views/schoolChart.tsx","views/readyChart.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx"],"names":["FETCH_ANSWERS","initialState","answers","Array","states","Set","schools","Header","styled","div","Wrapper","Title","h2","SelectButton","select","StatesChart","useState","state","setState","useSelector","from","values","totalCount","length","value","onChange","event","console","log","target","map","item","idx","data","answersMap","Map","totalNumberHere","has","platform","counter","get","set","trim","counters","Math","round","labels","keys","colors","i","push","floor","random","datasets","backgroundColor","borderColor","borderWidth","parseData","options","responsive","maintainAspectRatio","SchoolChart","useEffect","school","label","ReadyChart","setSchool","ready","Root","Container","Preview","App","dispatch","useDispatch","a","fetch","then","response","ok","json","catch","err","error","rawResponse","add","type","payload","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","action","compose","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f2d660f4.chunk.js","sourcesContent":["import { ThunkAction, ThunkDispatch } from \"redux-thunk\";\nimport { Action } from 'redux';\nexport interface AnswerState {\n    answers: Array<Answer>,\n    states: Set<string>,\n    schools: Set<string>\n\n}\n\ntype MyExtraArg = undefined;\ntype ThunkResult<R> = ThunkAction<R, AnswerState, MyExtraArg, Action>;\nexport type MyAction = { type: string, payload: AnswerState }\nexport type Answer = {\n    timeAns: string,\n    state: string,\n    school: string,\n    name: string,\n    platform: string,\n    platformStable: string,\n    ready: string,\n    timeToTraining: string,\n    timeOnTelephone: string\n}\nexport const FETCH_ANSWERS = \"ANSWERS/FETCH_ANSWERS\";\n\n\nconst initialState = () => {\n    return ({\n        answers: new Array<Answer>(),\n        states: new Set<string>(),\n        schools: new Set<string>()\n    })\n}\n\nexport const fetchAnswers = (): ThunkResult<Promise<void>> => async (dispatch) => {\n    const url = process.env.NODE_ENV === 'production' ? '/api' : 'http://localhost:8080/api'\n    const states = new Set<string>();\n    const schools = new Set<string>();\n    const rawResponse = await fetch(url)\n        .then(response => {\n            if (response.ok) {\n                console.log(response)\n                return response.json()\n            }\n            console.log(response)\n        }).catch(err => {\n            console.error(err);\n        })\n    const answers = rawResponse;\n    answers.map((item: Answer) => {\n        states.add(item.state.trim());\n        schools.add(item.school.trim());\n    })\n    dispatch({ type: FETCH_ANSWERS, payload: { answers, states, schools } })\n}\n\nexport const answersReducer = (state = initialState(), action: MyAction) => {\n    switch (action.type) {\n        case FETCH_ANSWERS: {\n            return {\n                ...state,\n                answers: [...action.payload.answers],\n                states: action.payload.states,\n                schools: action.payload.schools\n            }\n        }\n        default:\n            return state\n    }\n}","\nimport styled from \"styled-components\";\n\nexport const Header = styled.div`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport const Wrapper = styled.div`\n  width: 60vw;\n  max-height: 90vh;\n  display: flex;\n  margin:5rem auto;\n  flex-direction: column;\n  align-items: center;\n  @media(max-width:1100px){\n    width:90vw;\n    min-height:60vh;\n    max-height:90vh;\n    margin:10vh auto;\n  }\n`;\n\nexport const Title = styled.h2`\n  font-weight: bold;\n  color: #fff;\n  text-align: center;\n  margin: 1rem 2rem;\n  @media(max-width:1100px){\n    margin:0.5rem 1rem;\n    font-size:0.8rem;\n  }\n`;\nexport const SelectButton = styled.select`\n  text-align: center;\n  font-size: 1.4rem;\n  width: 20vw;\n  margin: 2rem;\n  font-weight: 800;\n  color: #fff;\n  background-color: #000127;\n  @media (max-width:1100px){\n    font-size:.8rem;\n    width:50vw;\n  }\n`;\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { AnswerState } from \"../store/answersReducer\";\nimport { Header, SelectButton, Title, Wrapper } from \"./shared/styles\";\n\n\nexport const StatesChart: React.FC = () => {\n  const [state, setState] = useState<string>(\"all\");\n  const answers = useSelector((state: AnswerState) => state.answers);\n  const states = Array.from(\n    useSelector((state: AnswerState) => state.states).values()\n  );\n\n  let totalCount = answers.length;\n  const parseData = () => {\n    const answersMap = new Map<string, number>();\n    let totalNumberHere = 0;\n    if (state === \"all\") {\n      answers.map((item) => {\n        totalNumberHere++;\n        if (answersMap.has(item.platform)) {\n          let counter = answersMap.get(item.platform);\n          if (counter) {\n            counter++;\n            answersMap.set(item.platform, counter);\n          }\n        } else {\n          answersMap.set(item.platform, 1);\n        }\n      });\n    } else {\n      answers.map((item) => {\n        if (item.state.trim() === state.trim()) {\n          totalNumberHere++;\n          if (answersMap.has(item.platform)) {\n            let counter = answersMap.get(item.platform);\n            if (counter) {\n              counter++;\n              answersMap.set(item.platform, counter);\n            }\n          } else {\n            answersMap.set(item.platform, 1);\n          }\n        }\n      });\n    }\n    let counters = Array.from(answersMap.values());\n    counters = counters.map((item) =>\n      Math.round((item / totalNumberHere) * 100)\n    );\n    console.log(counters);\n    let labels = Array.from(answersMap.keys());\n    labels = labels.map((item, idx) => `${item} ${counters[idx]}%`);\n    let colors = Array<string>();\n    for (let i = 0; i < counters.length; i++) {\n      colors.push(`rgb(\n                ${Math.floor(Math.random() * Math.floor(255))}\n                ,${Math.floor(Math.random() * Math.floor(255))}\n                ,${Math.floor(Math.random() * Math.floor(255))})`);\n    }\n\n    totalCount = totalNumberHere;\n    return {\n      labels,\n      datasets: [\n        {\n          data: counters,\n          backgroundColor: colors,\n          borderColor: \"#fff\",\n          borderWidth: 2,\n        },\n      ],\n    };\n  };\n\n  const onSelectHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    console.log(event.target.value)\n    setState(event.target.value);\n  };\n\n  return (\n    <Wrapper>\n      <Header>\n        <SelectButton value={state} onChange={onSelectHandler}>\n          <option value=\"all\">Все районы</option>\n          {states.map((item,idx) => (\n            <option value={item} key={idx}>{item}</option>\n          ))}\n        </SelectButton>\n        <Title>Всего отвтетов:{totalCount}</Title>\n      </Header>\n      <Pie\n        data={parseData()}\n        options={{ responsive: true, maintainAspectRatio: false }}\n      />\n      <Title>{state === 'all' ? \"Все районы\" : state}</Title>\n    </Wrapper>\n  );\n};\n","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { Bar, Pie } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { AnswerState } from \"../store/answersReducer\";\nimport { Header, SelectButton, Title, Wrapper } from \"./shared/styles\";\n\n\nexport const SchoolChart : React.FC = () => {\n    const schools = Array.from(\n        useSelector((state: AnswerState) => state.schools).values()\n      );\n    const [state, setState] = useState<string>('');\n    const answers = useSelector((state: AnswerState) => state.answers);\n    \n    useEffect(()=>{\n        setState(schools[0])\n    },[answers])\n    const parseData = () => {\n      const answersMap = new Map<string, number>();\n      let totalNumberHere = 0;\n      console.log(state);\n        answers.map((item) => {\n          if (item.school === state) {\n            totalNumberHere++;\n            if (answersMap.has(item.platform)) {\n              let counter = answersMap.get(item.platform);\n              if (counter) {\n                counter++;\n                answersMap.set(item.platform, counter);\n              }\n            } else {\n              answersMap.set(item.platform, 1);\n            }\n          }\n        });\n      \n      let counters = Array.from(answersMap.values());\n      counters = counters.map((item) =>\n        Math.round((item / totalNumberHere) * 100)\n      );\n      console.log(counters);\n      let labels = Array.from(answersMap.keys());\n      labels = labels.map((item, idx) => `${item} ${counters[idx]}%`);\n      const data = counters.map((item,idx)=>({\n        data:[counters[idx]],\n        backgroundColor:`rgb(\n          ${Math.floor(Math.random() * Math.floor(255))}\n          ,${Math.floor(Math.random() * Math.floor(255))}\n          ,${Math.floor(Math.random() * Math.floor(255))})`,\n          label:labels[idx]\n      }))\n      return {\n        datasets:data\n      };\n    };\n  \n    const onSelectHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n      console.log(event.target.value)\n      setState(event.target.value);\n    };\n  \n    return (\n      <Wrapper>\n        <Header>\n          <SelectButton value={state} onChange={onSelectHandler}>\n            {schools.map((item,idx) => (\n              <option value={item} key={idx}>{item}</option>\n            ))}\n          </SelectButton>\n        </Header>\n        <Bar\n          data={parseData()}\n          options={{ responsive: true, maintainAspectRatio: false }}\n        />\n        <Title>{state}</Title>\n      </Wrapper>\n    );\n  };","import React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { Pie } from \"react-chartjs-2\";\nimport { useSelector } from \"react-redux\";\nimport { AnswerState } from \"../store/answersReducer\";\nimport { Header, SelectButton, Title, Wrapper } from \"./shared/styles\";\n\n\nexport const ReadyChart: React.FC = () => {\n  const [school, setSchool] = useState<string>(\"all\");\n  const answers = useSelector((state: AnswerState) => state.answers);\n  const schools = Array.from(\n    useSelector((state: AnswerState) => state.schools).values()\n  );\n\n  let totalCount = answers.length;\n  const parseData = () => {\n    const answersMap = new Map<string, number>();\n    let totalNumberHere = 0;\n    if (school === \"all\") {\n      answers.map((item) => {\n        totalNumberHere++;\n        if (answersMap.has(item.ready)) {\n          let counter = answersMap.get(item.ready);\n          if (counter) {\n            counter++;\n            answersMap.set(item.ready, counter);\n          }\n        } else {\n          answersMap.set(item.ready, 1);\n        }\n      });\n    } else {\n      answers.map((item) => {\n        if (item.school.trim() === school.trim()) {\n          totalNumberHere++;\n          if (answersMap.has(item.ready)) {\n            let counter = answersMap.get(item.ready);\n            if (counter) {\n              counter++;\n              answersMap.set(item.ready, counter);\n            }\n          } else {\n            answersMap.set(item.ready, 1);\n          }\n        }\n      });\n    }\n    let counters = Array.from(answersMap.values());\n    counters = counters.map((item) =>\n      Math.round((item / totalNumberHere) * 100)\n    );\n    console.log(counters);\n    let labels = Array.from(answersMap.keys());\n    labels = labels.map((item, idx) => `${item} ${counters[idx]}%`);\n    let colors = Array<string>();\n    for (let i = 0; i < counters.length; i++) {\n      colors.push(`rgb(\n                ${Math.floor(Math.random() * Math.floor(255))}\n                ,${Math.floor(Math.random() * Math.floor(255))}\n                ,${Math.floor(Math.random() * Math.floor(255))})`);\n    }\n\n    totalCount = totalNumberHere;\n    return {\n      labels,\n      datasets: [\n        {\n          data: counters,\n          backgroundColor: colors,\n          borderColor: \"#fff\",\n          borderWidth: 2,\n        },\n      ],\n    };\n  };\n\n  const onSelectHandler = (event: ChangeEvent<HTMLSelectElement>) => {\n    console.log(event.target.value)\n    setSchool(event.target.value);\n  };\n\n  return (\n    <Wrapper>\n        <Title>Степень готовности к дистанционной работе на начало работы с 06.04 </Title>\n      <Header>\n        <SelectButton value={school} onChange={onSelectHandler}>\n          <option value=\"all\">Все школы</option>\n          {schools.map((item,idx) => (\n            <option value={item} key={idx}>{item}</option>\n          ))}\n        </SelectButton>\n      </Header>\n      <Pie\n        data={parseData()}\n        options={{ responsive: true, maintainAspectRatio: false }}\n      />\n      <Title>{school === 'all' ? \"Все школы\" : school}</Title>\n    </Wrapper>\n  );\n};\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { fetchAnswers } from \"./store/answersReducer\";\nimport { useDispatch } from \"react-redux\";\nimport { StatesChart } from \"./views/statesChart\";\nimport { SchoolChart } from \"./views/schoolChart\";\nimport { ReadyChart } from \"./views/readyChart\";\n\nconst Root = styled.div`\n  max-width: 100vw;\n  background-color: #000127;\n  max-height: 100vh;\n  height: 100vh;\n  overflow-y: scroll;\n  position: relative;\n  margin: 0;\n  padding: 0;\n`;\n\nconst Container = styled.div`\n  margin: 0 5vw;\n  @media (max-width: 1100px) {\n    margin: 1rem;\n  }\n`;\n\nconst Preview = styled.div`\n  display: flex;\n  flex-direction:column;\n  justify-content: center;\n  align-items: center;\n  font-size: 1rem;\n  font-weight: 800;\n  color: #fff;\n  margin: 5rem auto;\n  text-align:center;\n  @media (max-width: 1100px) {\n    font-size:0.8rem;\n  }\n`;\n\nconst Title = styled.h2`\n  font-size:2rem;\n\n`\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchAnswers());\n  }, []);\n  return (\n    <Root>\n      <Container>\n        <Preview>\n         <Title> Статистические данные</Title> Здесь представлена информация о том, какими\n          платформами пользуются(пользовались) учителя во время режима\n          самоизоляции для осуществления процесса дистанционного обучения\n        </Preview>\n        <StatesChart />\n        <hr></hr>\n        <SchoolChart />\n        <hr />\n        <ReadyChart />\n      </Container>\n    </Root>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import {applyMiddleware, compose, createStore} from 'redux'\nimport logger from 'redux-logger'\nimport thunk from 'redux-thunk'\nimport { answersReducer } from './answersReducer'\n\nexport const store = createStore(answersReducer,compose(\n    applyMiddleware(thunk,logger)\n))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport {store} from './store/store'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}